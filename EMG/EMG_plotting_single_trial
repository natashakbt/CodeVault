#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  1 14:23:50 2023

@author: natasha
"""


import numpy as np
import tables
import glob
import os
import scipy.stats
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter1d
import pandas as pd
#import pingouin as pg
from tqdm import tqdm, trange
import math
from scipy import signal

from sklearn.decomposition import PCA
 
#######################################
# IMPORTING DATA AND GETTING SETUP
#######################################

rat_name = "NB27"
if rat_name == "NB16":
    dirname="/media/natasha/drive2/Natasha_Data/NB16/NB16_Test1_4tastes_221202_144624/emg_output"
elif rat_name == "NB27":
    dirname = "/media/natasha/drive2/Natasha_Data/NB27/Test1/NB27_test1_4tastes_230520_134124/emg_output"

dirname = "/media/natasha/drive2/Natasha_Data/NB27/Test1/NB27_test1_4tastes_230520_134124/emg_output"
filt_ad = np.load(dirname + '/emgAD/emg_filt.npy')
filt_sty = np.load(dirname + '/emgSTY/emg_filt.npy')
env_ad = np.load(dirname + '/emgAD/emg_env.npy')
env_sty = np.load(dirname + '/emgSTY/emg_env.npy')

#######################################
# PLOTTING - 10 trials per figure
# AD and Sty filtered - all trials
# AD and Sty envelopped - all trials
#######################################
### SETTING UP PLOTTING PARAMS ###

my_xlims = np.arange(2500,3500) #0->7000, 2s pre-stim to 5s post-stim
#my_xlims = np.arange(0,7000)
plot_steps = np.arange(0,20,2)
x_ticks = np.array([0, 0.5, 1, 1.5])

### PLOTTING ###
#AD in red, Sty in blue
for this_data in [[filt_ad, filt_sty], [env_ad, env_sty]]:
    for j in range(int(env_sty.shape[1]/len(plot_steps))):
        fig, axs = plt.subplots(len(plot_steps)*2, 4,
            sharex=True, sharey = False,
            figsize=(8,8),
            squeeze = False)
        fig.suptitle(rat_name, fontsize=16, fontweight='bold')
        fig.text(0.5, 0.05, 'Time post-stimulus delivery (s)', ha='center', va='center')
        i = j*10
        for row in tqdm(plot_steps):
            for taste in range(4):
                axs[row, taste].plot(this_data[0][taste, i, my_xlims], 'r')
                axs[row, taste].spines['top'].set_visible(False)
                axs[row, taste].spines['right'].set_visible(False)
                axs[row, taste].spines['bottom'].set_visible(False)
                axs[row, taste].set_yticklabels([])
                axs[row, taste].tick_params(bottom = False)
                axs[row+1, taste].plot(this_data[1][taste, i, my_xlims])
                axs[row+1, taste].spines['top'].set_visible(False)
                axs[row+1, taste].spines['right'].set_visible(False)
                axs[row+1, taste].set_yticklabels([])
                #axs[row+1, taste].set_xticklabels(x_ticks)
                if taste == 0:
                    axs[row+1, taste].set_ylabel('T#' + str(i+1), ha='center', va='bottom', y =1.1 )
            i = i+1
plt.show()

#######################################
# plotting single trials of filtered EMG
#######################################
#good example data from NB16. Qhcl trial 18 ; Suc trial 19
trial = -1 #trial num -1
taste = 1 #suc=0 ; nacl=1 ; ca=2 ; qhcl=3
my_xlims = np.arange(1500,3500)
#x_ticks = np.array([0, -0.5, 0, 0.5, 1, 1.5, 2])

fig, axs = plt.subplots(2, 1,
    figsize=(16,8))


axs[0].plot(filt_ad[taste, trial, my_xlims], '0.4')
axs[0].axis('off')
axs[0].tick_params(bottom = True)
axs[0].set_ylabel('Anterior Digastric')
axs[0].vlines(x=500, ymin=min(filt_ad[taste, trial, my_xlims]), 
              ymax=max(filt_ad[taste, trial, my_xlims]),
              ls=':', lw=4, colors='k')

axs[1].plot(filt_sty[taste, trial, my_xlims], '0.4') #change this color
axs[1].spines['top'].set_visible(False)
axs[1].spines['right'].set_visible(False)
axs[1].spines['left'].set_visible(False)
axs[1].set_yticklabels([])
axs[1].tick_params(left = False)

axs[1].vlines(x=500, ymin=min(filt_sty[taste, trial, my_xlims]), 
              ymax=max(filt_sty[taste, trial, my_xlims]),
              ls=':', lw=4, colors='k')

fig.suptitle('Trial:' + str(trial+1) + ' of Taste:' + str(taste), 
             fontsize=16, fontweight='bold', y =1.1)
plt.tight_layout()


#######################################
# plot of single trace
#######################################
taste = 3
trial = 3 #real trial num -1
my_xlims = np.arange(1500,4000)
fig = plt.figure(figsize = (32,16), frameon=False)
plt.plot(env_ad[taste, trial, my_xlims], 'k',linewidth=7.0)

fig = plt.figure(figsize = (32,16), frameon=False)
plt.plot(filt_ad[taste, trial, my_xlims], 'k')

plt.show()

#######################################
# Lag of envelopped EMG signal, stats
#######################################
### 
trial = 5
corr = signal.correlate(env_ad[1, trial, my_xlims], env_sty[1, trial, my_xlims])
lags = signal.correlation_lags(len(env_ad[1, trial, my_xlims]), len(env_sty[1, trial, my_xlims]))
corr /= np.max(corr)
plt.title("Cross-corelation of AD with Sty for trial " + str(trial))
plt.plot(lags, corr)

# =============================================================================
# PCA on muscle groups
# =============================================================================
dirname="/media/natasha/drive2/Natasha_Data/NB16/NB16_Test1_4tastes_221202_144624"
h5_name = glob.glob(os.path.join(dirname, '*.h5'))[0]
h5 = tables.open_file(h5_name, 'r')

#wanted_dat = np.squeeze(h5.root.emg_BSA_results.gapes[:])

wanted_dat = h5.root.emg_BSA_results.emg_BSA_results_final[:]
wanted_dat = np.argmax(wanted_dat, axis=-1)[:,0]

inds = [1500, 4000]
wanted_dat = wanted_dat[..., inds[0]:inds[1]]

plt.plot(wanted_dat[1].mean(axis=1).T)

reshape_dat = np.reshape(wanted_dat, (2,-1)).T

pca_obj = PCA(n_components = 1, whiten=True).fit(reshape_dat)
pca_data = pca_obj.transform(reshape_dat)

reshape_pca_data = np.reshape(pca_data[:,:,np.newaxis],
                              wanted_dat.shape[1:])

plt.plot(reshape_pca_data.mean(axis=1).T)

### Testing if taste is discriminable pre-taste-delivery, 
### 500-1000ms post, or 1000-2500ms post
bsln_bin = reshape_pca_data[:,:,0:500]
mean_bsln_bin = np.mean(bsln_bin, axis=2)

pre_pal_bin = reshape_pca_data[:,:,500:1500]
mean_pre_pal_bin = np.mean(pre_pal_bin, axis=2)

post_pal_bin = reshape_pca_data[:,:,1500:2500]
mean_post_pal_bin = np.mean(post_pal_bin, axis=2)

stat_results = scipy.stats.f_oneway(mean_bsln_bin[0], mean_bsln_bin[1], mean_bsln_bin[2], mean_bsln_bin[3])
print(np.where(stat_results[1]<0.05))

stat_results = scipy.stats.f_oneway(mean_pre_pal_bin[0], mean_pre_pal_bin[1], mean_pre_pal_bin[2], mean_pre_pal_bin[3])
print(np.where(stat_results[1]<0.05))

stat_results = scipy.stats.f_oneway(mean_post_pal_bin[0], mean_post_pal_bin[1], mean_post_pal_bin[2], mean_post_pal_bin[3])
print(np.where(stat_results[1]<0.05))

### NEXT STEP:
    # Run three one-way ANOVAs on each epoch if they are distinct
    

    
    
    
# =============================================================================
# # Testing
# test_data = reshape_pca_data.mean(axis=1)
# plt.plot((test_data - test_data.mean(axis=0)).T)
# =============================================================================




